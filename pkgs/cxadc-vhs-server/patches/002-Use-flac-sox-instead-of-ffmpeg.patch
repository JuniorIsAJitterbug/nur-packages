diff --git a/README.md b/README.md
index 76e8c53..0073dff 100644
--- a/README.md
+++ b/README.md
@@ -67,7 +67,9 @@ The script `local-capture.sh` is included in the repository to aid with local ca
 - curl
 - jq
 - cxadc_vhs_server
-- ffmpeg (optional) with libsoxr (optional)
+- ffmpeg (optional)
+- flac (optional)
+- sox (optional)
 
 You can install the first three from most distros' default repositories: 
 
@@ -91,22 +93,24 @@ A static ffmpeg build with libsoxr can be obtained from https://johnvansickle.co
 
 ```text
 Usage: local-capture.sh [options] <basepath>
-        --video=          Number of CX card to use for video capture (unset=disabled)
-        --hifi=           Number of CX card to use for hifi capture (unset=disabled)
-        --linear=         ALSA device identifier for linear (unset=default)
-        --add-date        Add current date and time to the filenames
-        --convert-linear  Convert linear to flac+u8
-        --compress-video  Compress video
-        --compress-hifi   Compress hifi
-        --resample-hifi   Resample hifi to 10 MSps
-        --debug           Show commands executed
-        --help            Show usage information
+        --video=                Number of CX card to use for video capture (unset=disabled)
+        --hifi=                 Number of CX card to use for hifi capture (unset=disabled)
+        --linear=               ALSA device identifier for linear (unset=default)
+        --add-date              Add current date and time to the filenames
+        --convert-linear        Convert linear to flac+u8
+        --compress-video        Compress video
+        --compress-video-level  Video compression level (unset=4)
+        --compress-hifi         Compress hifi
+        --compress-hifi-level   Hifi compression level (unset=4)
+        --resample-hifi         Resample hifi to 10 MSps
+        --debug                 Show commands executed
+        --help                  Show usage information
 ```
 
 #### Example
 
 ```text
-$ ./local-capture.sh --video=0 --hifi=1 --convert-linear --compress-video --compress-hifi --resample-hifi test
+$ ./local-capture.sh --video=0 --hifi=1 --convert-linear --compress-video --compress-video-level=1 --compress-hifi --compress-hifi-level=1 --resample-hifi test
 Server started (PID 3854)
 server listening on unix:/tmp/tmp.qDMBd0Ynxu/server.sock
 PID 3872 is capturing video to test-video.ldf
diff --git a/local-capture.sh b/local-capture.sh
old mode 100644
new mode 100755
index 8843df8..bad2ee3
--- a/local-capture.sh
+++ b/local-capture.sh
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/usr/bin/env bash
 
 set -euo pipefail
 
@@ -7,16 +7,22 @@ SCRIPT_DIR="$(
 	cd "$(dirname "$0")"
 	pwd
 )"
-SERVER="$SCRIPT_DIR/cxadc_vhs_server"
 TEMP_DIR="$(mktemp --directory)"
 SOCKET="$TEMP_DIR/server.sock"
 
 # test the commands we need. if they fail, user will be appropriately notified by bash
 
-"$SERVER" version >/dev/null
 jq --version >/dev/null
 curl --version >/dev/null
 
+if "$SCRIPT_DIR/cxadc_vhs_server" version &>/dev/null; then
+	SERVER="$SCRIPT_DIR/cxadc_vhs_server"
+fi
+
+if "cxadc_vhs_server" version &>/dev/null; then
+	SERVER="cxadc_vhs_server"
+fi
+
 if "$SCRIPT_DIR/ffmpeg" -version &>/dev/null; then
 	FFMPEG_CMD="$SCRIPT_DIR/ffmpeg"
 fi
@@ -25,14 +31,36 @@ if "ffmpeg" -version &>/dev/null; then
 	FFMPEG_CMD="ffmpeg"
 fi
 
+if "$SCRIPT_DIR/flac" --version &>/dev/null; then
+	FLAC_CMD="$SCRIPT_DIR/flac"
+fi
+
+if "flac" --version &>/dev/null; then
+	FLAC_CMD="flac"
+fi
+
+if "$SCRIPT_DIR/sox" --version &>/dev/null; then
+	SOX_CMD="$SCRIPT_DIR/sox"
+fi
+
+if "sox" --version &>/dev/null; then
+	SOX_CMD="sox"
+fi
+
+if [[ -z "${SERVER-}" ]]; then
+	echo "No working cxadc_vhs_server found."
+fi
+
 if [[ -z "${FFMPEG_CMD-}" ]]; then
 	echo "No working ffmpeg found, some features may be unavailable. Obtain a binary here: https://johnvansickle.com/ffmpeg/"
-else
-	if "$FFMPEG_CMD" -version | grep -- '--enable-libsoxr' &>/dev/null; then
-		FFMPEG_HAS_LIBSOXR=1
-	else
-		echo "Your ffmpeg is not built with libsoxr, some features may be unavailable"
-	fi
+fi
+
+if [[ -z "${FLAC_CMD-}" ]]; then
+	echo "No working flac found, some features may be unavailable."
+fi
+
+if [[ -z "${SOX_CMD-}" ]]; then
+	echo "No working sox found, some features may be unavailable."
 fi
 
 for i in "$@"; do
@@ -61,10 +89,18 @@ for i in "$@"; do
 		COMPRESS_VIDEO="YES"
 		shift # past argument with no value
 		;;
+	--compress-video-level=*)
+		COMPRESS_VIDEO_LEVEL="${i#*=}"
+		shift # argument=value
+		;;
 	--compress-hifi)
 		COMPRESS_HIFI="YES"
 		shift # past argument with no value
 		;;
+	--compress-hifi-level=*)
+		COMPRESS_HIFI_LEVEL="${i#*=}"
+		shift # argument=value
+		;;
 	--resample-hifi)
 		RESAMPLE_HIFI="YES"
 		shift # past argument with no value
@@ -88,16 +124,18 @@ done
 
 function usage {
 	echo "Usage: $SCRIPT_NAME [options] <basepath>" >&2
-	printf "\t--video=          Number of CX card to use for video capture (unset=disabled)\n" >&2
-	printf "\t--hifi=           Number of CX card to use for hifi capture (unset=disabled)\n" >&2
-	printf "\t--linear=         ALSA device identifier for linear (unset=default)\n" >&2
-	printf "\t--add-date        Add current date and time to the filenames\n" >&2
-	printf "\t--convert-linear  Convert linear to flac+u8\n" >&2
-	printf "\t--compress-video  Compress video\n" >&2
-	printf "\t--compress-hifi   Compress hifi\n" >&2
-	printf "\t--resample-hifi   Resample hifi to 10 MSps\n" >&2
-	printf "\t--debug           Show commands executed\n" >&2
-	printf "\t--help            Show usage information\n" >&2
+	printf "\t--video=                Number of CX card to use for video capture (unset=disabled)\n" >&2
+	printf "\t--hifi=                 Number of CX card to use for hifi capture (unset=disabled)\n" >&2
+	printf "\t--linear=               ALSA device identifier for linear (unset=default)\n" >&2
+	printf "\t--add-date              Add current date and time to the filenames\n" >&2
+	printf "\t--convert-linear        Convert linear to flac+u8\n" >&2
+	printf "\t--compress-video        Compress video\n" >&2
+	printf "\t--compress-video-level  Video compression level (unset=4)\n" >&2
+	printf "\t--compress-hifi         Compress hifi\n" >&2
+	printf "\t--compress-hifi-level   Hifi compression level (unset=4)\n" >&2
+	printf "\t--resample-hifi         Resample hifi to 10 MSps\n" >&2
+	printf "\t--debug                 Show commands executed\n" >&2
+	printf "\t--help                  Show usage information\n" >&2
 	exit 1
 }
 
@@ -112,14 +150,15 @@ fi
 
 if [ -z "${FFMPEG_CMD-}" ]; then
 	[ -n "${CONVERT_LINEAR-}" ] || echo "Converting linear requires ffmpeg." && exit 1
-	[ -n "${COMPRESS_VIDEO-}" ] || echo "Compressing video requires ffmpeg." && exit 1
-	[ -n "${COMPRESS_HIFI-}" ] || echo "Compressing hifi requires ffmpeg." && exit 1
-	[ -n "${RESAMPLE_HIFI-}" ] || echo "Resampling hifi requires ffmpeg." && exit 1
 fi
 
-if [ -n "${RESAMPLE_HIFI-}" ] && [ -z "${FFMPEG_HAS_LIBSOXR-}" ]; then
-	echo "Resampling hifi requires an ffmpeg build with libsoxr."
-	exit 1
+if [ -z "${FLAC_CMD-}" ]; then
+	[ -n "${COMPRESS_VIDEO-}" ] || echo "Compressing video requires flac." && exit 1
+	[ -n "${COMPRESS_HIFI-}" ] || echo "Compressing hifi requires flac." && exit 1
+fi
+
+if [ -z "${SOX_CMD-}" ]; then
+	[ -n "${RESAMPLE_HIFI-}" ] || echo "Resampling hifi requires sox." && exit 1
 fi
 
 OUTPUT_BASEPATH="$1"
@@ -185,39 +224,46 @@ if [[ -n "${VIDEO_IDX-}" ]]; then
 		curl -X GET --unix-socket "$SOCKET" -s --output "$VIDEO_PATH" "http:/d/cxadc?$VIDEO_IDX" &
 	else
 		VIDEO_PATH="$OUTPUT_BASEPATH-video.ldf"
-		curl -X GET --unix-socket "$SOCKET" -s --output - "http:/d/cxadc?$VIDEO_IDX" | "$FFMPEG_CMD" \
-			-hide_banner -loglevel error \
-			-ar 40000 -f u8 -i - \
-			-compression_level 0 -f flac "$VIDEO_PATH" &
+		LEVEL="${COMPRESS_VIDEO_LEVEL:=4}" 
+		curl -X GET --unix-socket "$SOCKET" -s --output - "http:/d/cxadc?$VIDEO_IDX" | "$FLAC_CMD" \
+			--silent -"${LEVEL}" --blocksize=65535 --lax \
+			--sample-rate=40000 --channels=1 --bps=8 \
+			--sign=unsigned --endian=little \
+			-f - -o "$VIDEO_PATH" &
 	fi
 	VIDEO_PID=$!
 	echo "PID $VIDEO_PID is capturing video to $VIDEO_PATH"
 fi
 if [[ -n "${HIFI_IDX-}" ]]; then
-	if [[ -n "${RESAMPLE_HIFI-}" ]]; then
-		RESAMPLE_FILTERS="-filter_complex aresample=resampler=soxr:precision=15,aformat=sample_fmts=u8:sample_rates=10000"
-	else
-		RESAMPLE_FILTERS=""
-	fi
-
 	if [[ -z "${COMPRESS_HIFI-}" ]]; then
 		HIFI_PATH="$OUTPUT_BASEPATH-hifi.u8"
 		if [[ -z "${RESAMPLE_HIFI-}" ]]; then
 			curl -X GET --unix-socket "$SOCKET" -s --output "$HIFI_PATH" "http:/d/cxadc?$HIFI_IDX" &
 		else
-			curl -X GET --unix-socket "$SOCKET" -s --output - "http:/d/cxadc?$HIFI_IDX" | "$FFMPEG_CMD" \
-				-hide_banner -loglevel error \
-				-ar 40000 -f u8 -i - \
-				$RESAMPLE_FILTERS \
-				-compression_level 0 -f u8 "$HIFI_PATH" &
+			curl -X GET --unix-socket "$SOCKET" -s --output - "http:/d/cxadc?$HIFI_IDX" | "$SOX_CMD" \
+				-D \
+				-t raw -r 400000 -b 8 -c 1 -L -e unsigned-integer - \
+				-t raw           -b 8 -c 1 -L -e unsigned-integer "$HIFI_PATH" rate -l 100000 &
 		fi
 	else
 		HIFI_PATH="$OUTPUT_BASEPATH-hifi.flac"
-		curl -X GET --unix-socket "$SOCKET" -s --output - "http:/d/cxadc?$HIFI_IDX" | "$FFMPEG_CMD" \
-			-hide_banner -loglevel error \
-			-ar 40000 -f u8 -i - \
-			$RESAMPLE_FILTERS \
-			-compression_level 0 -f flac "$HIFI_PATH" &
+		LEVEL="${COMPRESS_HIFI_LEVEL:=4}" 
+		if [[ -z "${RESAMPLE_HIFI-}" ]]; then
+			curl -X GET --unix-socket "$SOCKET" -s --output - "http:/d/cxadc?$HIFI_IDX" | "$FLAC_CMD" \
+				--silent -"${LEVEL}" --blocksize=65535 --lax \
+				--sample-rate=40000 --channels=1 --bps=8 \
+				--sign=unsigned --endian=little \
+				-f - -o "$HIFI_PATH" &
+		else
+			curl -X GET --unix-socket "$SOCKET" -s --output - "http:/d/cxadc?$HIFI_IDX" | "$SOX_CMD" \
+				-D \
+				-t raw -r 400000 -b 8 -c 1 -L -e unsigned-integer - \
+				-t raw           -b 8 -c 1 -L -e unsigned-integer - rate -l 100000 | "$FLAC_CMD" \
+					--silent -"${LEVEL}" --blocksize=65535 --lax \
+					--sample-rate=10000 --channels=1 --bps=8 \
+					--sign=unsigned --endian=little \
+					-f - -o "$HIFI_PATH" &
+		fi
 	fi
 	HIFI_PID=$!
 	echo "PID $HIFI_PID is capturing hifi to $HIFI_PATH"
